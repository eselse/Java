Вопросы и ответы
Глава 6. Дополнительные сведения о методах и классах.

    1. Предположим, имеется следующий фрагмент кода.

       class x {
           private int count;
       }

       Исходя из этого допустим ли следующий код?

       class Y {
           public static void main(String args[]) {
               X ob = new X();

               ob.count = 10;
           }
       }

     1. Нет. Закрытый (private) член недоступен за пределами своего класса.

    2. Модификатор доступа должен _______________ объявлению члена класса

     2. предшествовать

    3. Помимо очереди, в программах часто используется структура данных,
       которая называется стеком. Обращение к стеку осуществляется по принципу
       "первым пришел - последним обслужен". Стек можно сравнить со стопкой тарелок,
       стоящих на столе. Последний берется тарелка, поставленная на стол первой.
       Создайте класс Stack, реализующий стек для зранения символов. Используйте
       методы push() и pop() для манипулирования содержимым стека. Пользователь
       класса Stack должен иметь возможность задавать размер стека при его создании.
       Все члены класса Stack, кроме методов push() и pop(), должны быть объявлены
       как private. (Подсказка: в качестве исходной заготовки можете воспользоваться
       классом Queue, изменив в нем лишь способ доступа к данным.)

     3. // Класс, реализующий стек для хранения символов
        class Stack {
            private char stck[]; // массив для хранения элементов стека
            private int tos;     // вершина стека

            // Создать пустой стек заданного размера
            Stack(int size) {
                stck = new char[size]; // выделить память для стека
                tos = 0;
            }

            // Создать один стек из другого стека
            Stack(Stack ob) {
                tos = ob.tos;
                stck = new char[ob.stck.length];

                // скопировать элементы
                for(int i = 0; i < tos; i++)
                    stck[i] = ob.stck[i];
            }

            // Создать стек с начальными значениями
            Stack(char a[]) {
                stck = new char[a.length];

                for(int i = 0; i < a.length; i++) {
                    push(a[i]);
                }
            }

            // Поместить символы в стек
            void push(char ch) {
                if(tos == stck.length) {
                    System.out.println(" -- Стек заполнен");
                    return;
                }

                stck[tos] = ch;
                tos++;
            }

            // Извлечь символы из стека
            char pop() {
                if(tos == 0) {
                    System.out.println(" -- Стек пуст");
                    return (char) 0;
                }

                tos--;
                return stck[tos];
            }
        }

        // Демонстрация использования класса Stack
        class StDemo {
            public static void main(String args[]) {
                // создать пустой стек на 10 элементов
                Stack stck1 = new Stack(10);

                char name[] = {'T', 'o', 'm'};

                // создать стек из массива
                Stack stk2 = new Stack(name);

                char ch;
                int i;

                // поместить символыв стек stk1
                for(i = 0; i < 10; i++)
                    stck1.push((char) ('A' + i));

                // создать один стек из другого стека
                Stack stk3 = new Stack(stck1);

                // отобразить стеки
                System.out.print("Содержимое stk1: ");
                for(i = 0; i < 10; i++) {
                    ch = stck1.pop();
                    System.out.print(ch);
                }

                System.out.println();

                System.out.print("Содержимое stk2: ");
                for(i = 0; i < 3; i++) {
                    ch = stk2.pop();
                    System.out.print(ch);
                }

                System.out.println();

                System.out.print("Содержимое stk3: ");
                for(i = 0; i < 10; i++) {
                    ch = stk3.pop();
                    System.out.print(ch);
                }

                System.out.println();
            }
        }

        Ниже приведен результат выполнения данной программы.

        Содержимое stk1: JIHGFEDCBA
        Содержимое stk2: moT
        Содержимое stk3: JIHGFEDCBA

    4. Предположим имеется следующий класс.

       class Test {
           int a;
           Test(int i) {a = i; }
       }

       Напишите метод swap(), реализующий обмен содержимым между двумя объектами
       типа Test, на которые ссылаются две переменные данного типа.

     4. void swap(Test ob1, Test ob2) {
            int t;

            t = ob1.a;
            ob1.a = ob2.a;
            ob2.a = t;
        }

    5. Правильно ли написан следующий фрагмент кода?

       class X {
           int meth(int a, int b) { ... }
           String meth(int a, int b) { ... }
       }

     5. Нет, неправильно. Перегружаемые методы могут возвращать значения разного
        типа, но это не играет никакой роли при разрешении ссылок на перегруженные
        версии. Перегружаемые методы должны иметь разные списки аргументов.

    6. Напишите рекурсивный метод, отображающий символы, составляющие строку в
       обратном порядке.

     6. // Отображение символов строки в обратном порядке
        // с помощью рекурсии
        class Backwards {
            String str;

            Backwards(String s) {
                str = s;
            }

            void backward(int idx) {
                if(idx != str.length() - 1) backward(idx + 1);

                System.out.print(str.charAt(idx));
            }
        }

        class BWDemo {
            public static void main(String args[]) {
                Backwards s = new Backwards("This is a test");

                s.backward(0);
            }
        }

    7. Допустим, все объекты класса должны совместно использовать одну и ту же
       переменную. Как объявить эту переменную?

     7. Переменная, предназначенная для совместного использования, должна быть
        объявлена как static.

    8. Для чего может понадобиться статический блок?

     8. Статический блок служит для выполнения любых инициализирующих действий в
        классе до создания конкретных объектов.

    9. Что такое внутренний класс?

     9. Внутренний класс это нестатический вложенный класс.

    10. Допустим, требуется член класса, к которому могут обращаться только другие
        члены этого же класса. Какой модификатор доступа следует использовать в 
        его объявлении?

     10. Модификатор доступа private.

    11. Имя метода и список его параметров вместе составляют ______________ метода.

     11. сигнатуру

    12. Если методу передается значение типа int, то в этом случае используется
        передача по ____________.

     12. значению

    13. Создайте метод sum(), принимающий список аргументов переменной длины и
        предназначенный для суммирования передаваемых ему значений типа int.
        Метод должен возвращать результат суммирования. Продемонстрируйте
        работу этого метода.

     13. Существует множество вариантов решения данной задачи. Ниже представлен
         один из них.

         class SumIt{
             int sum(int ... n) {
                 int result = 0;
                 for(int i = 0; i < n.length; i++)
                     result += n[i];

                 return result;
             }
         }

         class SumDemo2 {
             public static void main(String args[]) {

                 SumIt siObj = new SumIt();

                 int total = siObj.sum(1, 2, 3);
                 System.out.println("Сумма: " + total);

                 total = siObj.sum(1, 2, 3, 4, 5);
                 System.out.println("Сумма: " + total);
             }
         }

    14. Можно ди перегружать методы с переменным количеством аргументов?

     14. Да, можно.

    15. Приведите пример вызова перегруженного метода с переменным количеством
        аргументов, демонстрирующий возникновение неопределенности.

     15. Ниже приведен один из вариантов перегружаемого метода с переменным
         количеством аргументов, при вызове которго проявляется неоднозначность.

         double myMeth(double ... v) { // ... }
         double myMeth(double d, double  ... v) { // ... }

         Если попытаться вызвать метод myMeth() с одним аргументом следующим образом:
         myMeth(1.1);
         то компилятор не сможет определить, какой именно метод вызывается