Вопросы и ответы
Глава 9. Обработка исключений.

    1. Какой класс находится на вершине иерархии исключений?

     1. На вершине иерархии исключений находится класс Throwable.

    2. Объясните вкратце, как используются ключевые слова try и catch?

     2. Ключевые слова try и catch используются совместно. Операторы программы,
     	в которых вы хотитеотслеживать исключения, помещаются  в блок try.
     	Перехват и обработка исключений осуществляются в блоке catch.

    3. Какая ошибка допущена в приведенном ниже фрагменте кода?

       // ...
       vals[18] = 10;
       catch (ArrayIndexOutOfBoundsException exc) {
           // обработать ошибку
       }

     3. Блоку catch не предшествует блок try.

    4. Что произойдет, если исключение не будет перехвачено?

     4. Если исключение не будет перехвачено, произойдет аварийное завершение
     	программы.

    5. Какая ошибка допущена в приведенном ниже фрагменте кода?

       class A extends Exception { ...

       class B extends A { ...

       // ...

       try {
           // ...
       }
       catch (A exc) { ... }
       catch (B exc) { ... }

     5. В данном фрагменте кода оператор catch для суперкласса предшествует
     	оператору catch для подкласса. А поскольку оператор catch для суперкласса
     	будет перехватывать также исключения, относящиеся к подклассу, то в программе
     	окажется код, которому никогда не бдет передано упраление.

    6. Может ли внутренний блок catch повторно генерировать исключение, которое
       будет обработано во внешнем блоке catch?

     6. Да, исключения могут генерироваться повторно.

    7. Блок finally - последний фрагмент кода, выполняемый перед зывершением
       программы. Верно или неверно? Обоснуйте свой ответ.

     7. Неверно. Блок finally выполняется по завершении блока try.

    8. Исключения какого типа необходимо явно объявлять с помощью оператора
       throws, включаемого в объявление метода?

     8. С помощью оператора throws объявляются все исключения, кроме
        RuntimeException и Error.

    9. Какая ошибка допущена в приведенном ниже фрагменте кода?

       class MyClass { // ... }
       // ...
       throw new MyClass();

     9. Класс MyClass не является производным от класса Throwable. С помощью
     	оператора throw могут генерироваться лишь те исключения, которые являются
     	подклассами, производными от Throwable.

    10. Отвечая на вопрос 3 упражнения для самопроверки по материалу главы 6, вы
        создали класс Stack. Добавьте в него специальные исключения, реагирующие 
        на попытку поместить элемент в переполненный стек и извлечь элемент из 
        пустого стека.

     10. // Исключение, возникающее при переполнении стека
     	 class StackFullException extends Exception {
     	     int size;

     	     StackFullException (int s) { size = s; }

     	     public String toString() {
     	         return "\nСтек заполнен. Максимальный размер стека: " + 
     	         size;
     	     }
     	 }

     	 // Исключение, возникающее при обращении к пустому стеку
     	 class StackEmptyException extends Exception {
     	     public String toString() {
     	         return "\nСтек пуст.";
     	     }
     	 }

     	 // Класс, реализующий стек для хранения символов
     	 class Stack {
     	     private char stck[]; // массив для хранения элементов стека
     	     private int tos; // вершина стека

     	      // Создать пустой стек заданного размера
     	      Stack(int size) {
     	          stck = new char[size]; // выделить память для стека
     	          tos = 0;
     	      }

     	      // Создать один стек на основе другого стека
     	      Stack(Stack ob) {
     	          stck = new char[ob.stck.length];
     	          tos = ob.tos;

     	          // скопировать элементы
     	          for(int i = 0; i < tos; i++)
     	              stck[i] = ob.stck[i];
     	      }

     	      // Создать стек с начальными значениями
     	      Stack(char a[]) {
     	          stck = new char[a.length];

     	          for(int i = 0; i < a.length; i++) {
     	              try {
     	                  push(a[i]);
     	              }
     	              catch (StackFullException exc) {
     	                  System.out.println(exc);
     	              }
     	          }
     	      }

     	      // Поместить символы в стек
     	      void push(char ch) throws StackFullException {
     	          if(tos == stck.length)
     	              throw new StackFullException(stck.length);

     	          stck[tos] = ch;
     	          tos++;
     	      }

     	      // Извлечь символы из стека
     	      char pop() throws StackEmptyException {
     	          if(tos == 0)
     	              throw new StackEmptyException();
     	          tos--;
     	          return stck[tos];
     	      }
     	 }

    11. Назовите три причины, по которым могут генерироваться исключения.

     11. Исключение может быть сгенерировано в результатеошибки в 
     	 виртуальной машине Java, ошибки в программе или явным образом с
     	 помощью оператора throw.

    12. Назовите два непосредственных подкласса Throwable.

     12. Классы Error и Exception

    13. Что такое групповой перехват исключения?

     13. Групповым перехватом исключения такой перехват, который позволяет
      	 перехватывать два и более исключения одним оператором catch.

    14. Следует ли перехватывать в программе исключения типа Error?

     14. Нет, не следует.