Вопросы и ответы
Глава 10. Ввод-вывод данных.

    1. Для чего в Java определены как байтовые, так и символьные потоки?

     1. Первоначально в Java были определены только байтовые потоки. Они особенно
        удобны для ввода-вывода двоичных данных и поддерживают произвольный
        доступ в файлах. Символьные потоки оптимизированы для использования
        кодировки Unicode.

    2. Как известно, консольные операции ввода-вывода осуществляются в текстовом
       виде. Почемуже в Java для этой цели используются байтовые потоки?

     2. Стандартные потоки ввода-вывода System.in, System.out и System.err были
        определены в Java до введения символьных потоков.

    3. Как открыть файл для чтений байтов?

     3. Ниже приведен один из способов открытия файла для ввода данных типа byte.

        FileInputStream fin = new FileInputStream("test")

    4. Как открыть файл для чтения символов?

     4. Ниже приведен один из способов открытия файла для ввода символов.

        FileReader fr = new FileReader("test");

    5. Как открыть файл для выполнения операций ввода-вывода с произвольным
       доступом?

     5. Ниже приведен один из способов открытия файла для выполнения операций
        ввода-вывода с произвольным доступом.

        randfile = new RandomAccessFile("test", "rw");

    6. Как преобразовать числовую строку "123.23" в ее двоичный эквивалент?

     6. Для того чтобы преобразовать числовую строку в её двоичный эквивалент,
        следует воспользоваться одним из методов синтаксического разбора, определенных
        в классах оболочек типов, например Integer или Double.

    7. Напишите программу для копирования текстовых файлов. Видоизмените ее
       таким образом, чтобы все пробелы заменялись дефисами. Используйте при
       написании программы классы, представляющие байтовые потоки, а также
       традиционный способ закрытия файла явным вызовом метода close().

     7. /*
            Копирование текстового файла с заменой пробелов дефисами.

            В этой версии программы используются байтовые потоки.

            Для того чтобы воспользоваться этой программой, укажите
            в командной строке имена исходного и целевого фалов. Например:

            java Hyphen source target
        */

        import java.io.*;

        class Hyphen {
            public static void main(String args[]) {
                int i;
                FileInputStream fin = null;
                FileOutputStream fout = null;

                // Сначала проверить, указаны ли имена обоих файлов
                if(args.length != 2) {
                    System.out.println("Использование: Hyphen откуда куда");
                    return;
                }

                // Скопировать файл и заменить в нем пробелы дефисами
                try {
                    fin = new FileInputStream(args[0]);
                    fout = new FileOutputStream(args[1]);

                    do {
                        i = fin.read();
                        // преобразовать пробел в дефис
                        if((char) i == ' ') i = '-';

                        if(i != -1) fout.write(i);
                    }
                    while (i != -1);
                }
                catch (IOException exc) {
                    System.out.println("Ошибка ввода-вывода: " + exc);
                }
                finally {
                    try {
                        if(fin != null) fin.close();
                    }
                    catch (IOException exc) {
                        System.out.println("Ошибка приз закрытии входного файла.");
                    }
                    try {
                        if(fin != null) fout.close();
                    }
                    catch (IOException exc) {
                        System.out.println("Ошибка при закрытии выходного файла.");
                    }
                }
            }
        }

    8. Перепишите программу, созданную в предыдущем пункте, таким образом, чтобы
       в ней использовались классы, представляющие символьные потоки. На этот раз
       воспользуйтесь оператором try с ресурсами для автоматического закрытия файла.

     8. /*
            Копирование текстового файла с заменой пробелов дефисами.

            В этой версии программы используются символьные потоки.

            Для того чтобы воспользоваться это программой, укажите
            в командной строке имена исходного и целевого файлов. Например:

            java Hyphen2 source target

            Для компиляции этого кода требуется JDK 7
            или более поздняя версия данного комплекта.
        */

        import java.io.*;

        class Hyphet2 {
            public static void main(String args[]) throws IOException {
                int i;

                // Сначала проверить, указаны ли имена обоих файлов
                if(args.length != 2) {
                    System.out.println("Использование: CopyFile откуда куда");
                    return;
                }

                // Скопировать файл и заменить в нем пробелы дефисами,
                // используя оператор try с ресурсами
                try (FileReader fin = new FileReader(args[0]);
                    FileWriter fout = new FileWriter(args[1])) {

                    do {
                        i = fin.read();

                        // преобразовать пробел в дефис
                        if((char) i == ' ') i = '-';

                        if(i != -1) fout.write(i);
                    }
                    while(i != -1);
                }
                catch(IOException exc) {
                    System.out.println("Ошибка ввода-вывода:" + exc);
                }
            }
        }

    9. К какому типу относится поток System.in?

     9. К типу InputStream

    10. Какое значение возвращает метод read() класса InputStream по достижении
        конца потока?

     10. Значение -1

    11. Поток какого типа используется для чтения двоичных данных?

     11. Поток типа DataInputStream.

    12. Классы Reader и Writer находятся  на вершине иерархии классо _____
        _____.

     12. символьного ввода-вывода

    13. Оператор try с ресурсами служит для _____.

     13. Автоматического управления ресурсами

    14. Справедливо ли следующее утверждение: "Если для закрытия файла используется
        традиционный способ, то это лучше всего делать в блоке finally"?

     14. Справедливо.