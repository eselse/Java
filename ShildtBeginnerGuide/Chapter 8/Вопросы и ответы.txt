Вопросы и ответы
Глава 8. Пакеты и интерфейсы.

    1. Используя код, созданный в упражнении 8.1, поместите в пакет qpack интерфейс
       ICharQ и все три реализующих его класса. Оставив класс IQDemo в пакете, ис-
       пользуемом по умолчанию, покажите, как импортировать и использовать классы
       из пакета qpack.

     1. Для того чтобы включить интерфейс ICharQ и реализующие его классы в пакет
        qpack, следует поместить каждый из них в отдельный файл, объявить все классы,
        реализующие  данный интерфейс, как public, а в начале каждого файла ввести
        следующий оператор:

        package qpack;

        После этого можно использовать пакет qpack, добавив в интерфейс IQDemo
        следующий оператор import:

        import qpack.*;

    2. Что такое пространство имен? Почему так важна возможность его разделения на
       отдельные области в java?

     2. Пространство имен - это область объявлений. Разделяя пространство имен на
        отделбные области, можно предотвратить конфликты имен.

    3. Содержимое пакетов хранится в ___________.

     3. каталогах

    4. В чем отличие доступа, определяемого ключевым словом protected, от доступа
       по умолчанию?

     4. Член класса с доступом типа protected может быть использован в пределах
        текущего пакета, а также в подклассах данного класса, относящихся к
        любому пакету.
        Член класса с доступом по умолчанию может быть использовантолько в пределах
        текущего пакета.

    5. Допустим, классы, содержащиеся в одном пакете, требуется использовать в
       другом пакете. Какими двумя способами можно добится этого?

     5. Для того чтобы воспользоваться членом пакета, нужно указать его полное имя
        или же импортировать этот член с помощью оператора import.

    6. "Один интерфейс - множество методов" - таков главный принцип Java. Какое
       языковое средство лучше всего демострирует это принцип?

     6. Этот принцип объектно-ориентированного программирования лучше всего
        демонстрирует интерфейс.

    7. Сколько классов могут реализовать один и тот же интерфейс? Сколько
       интерфейсов может реализовать один класс?

     7. Один интерфейс может быть реализован любым количеством классов.
        Класс может реализовать произвольное число интерфейсов.

    8. Может ли один интерфейс наследовать другой?

     8. Да, может. Механизм наследования распространяется и на интерфейсы.

    9. Создайте интерфейс для класса Vehicle, рассмотренного в главе 7, назвав его
       IVehicle.

     9. interface IVehicle {
         // Вернуть дальность поездки транспортного средства
         int range();

         // Вычислить объем топлива, требующегося
         // для прохождения заданного пути
         double fuelneeded(int miles);

         // Методы доступа к переменным экземпляра
         int getPassengers();
         void setPassengers(int p);
         int getFuelcap();
         void setFuelcap(int f);
         int getMpg();
         void setMpg(int m);
     }

    10. Переменные, объявленные в интерфейсе, неявно принимают модификаторы
        static и final. Какие приемущества это дает?

     10. Переменные, объявленные в интерфейсе, могут использоваться в качестве
         именованных констант, общих для всех файлов программы. Доступк ним
         обеспечивается путем импорта того интерфейса, в котором они объявлены.

    11. Пакет по сути является контейнером для классов. Верно или не верно?

     11. Верно.

    12. Какой стандартный пакет автоматически импортируется в любую программу на
        Java?

     12. Пакет java.lang.

    13. Какое ключевое слово используется для объявления в интерфейсе метода по
        умолчанию?

     13. Это слово default.

    14. Возможно ли, начиная с JDK 8, определение статического метода интерфейса?

     14. Да.

    15. Предположим, что интерфейс ICharQ, представленный в упражнении 8.1, 
        получил широкое распространение в течение нескольких лет. В какой-то момент вы
        решили добавить в него метод reset(), который будет использоваться для сброса
        очереди в её исходное пустое состояние. Как это можно осуществить, не нарушая
        работоспособности существующего кода, в случае использования комплекта JDK 8?

     15. Для этого необходимо использовать метод по умолчанию. Вы не можете знать,
         как сбрасывать каждую реализацию очереди, поэтому стандартная реализация
         метода reset() должна сообщать об ошибке, указывающей на остутствие
         реализации. К счастью, поскольку отсутствует существующий код, предполагающий
         наличие у интерфейса ICharQ метода reset(), в существующем коде подобная
         ошибка не возникает и его работоспособность не будет нарушена.

    16. Как можно вызвать статический метод интерфейса?

     16. Статический метод вызывается с указанием имени интерфейса, после которого
         ставится разделитель-точка.
     

